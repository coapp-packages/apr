# -*- Makefile -*-
!IF "$(OS)" == "Windows_NT"
NULL=
rmdir=rd /s /q
!ELSE
NULL=nul
rmdir=deltree /y
!ERROR it's not NT
!ENDIF

SILENT=@

# Default build and bind modes
BUILD_MODE = release
BIND_MODE  = shared

!IF "$(BUILD_MODE)" == "release" || "$(BUILD_MODE)" == "Release" \
 || "$(BUILD_MODE)" == "Win32 Release"
CFG_LDFLAGS = /debug /opt:ref /incremental:no /machine:X86
CFG_CFLAGS  = /MD /Zi /O2 /Oy- /D "NDEBUG"

!ELSEIF "$(BUILD_MODE)" == "debug" || "$(BUILD_MODE)" == "Debug" \
     || "$(BUILD_MODE)" == "Win32 Debug"
CFG_CFLAGS  = /MDd /Zi /Od /EHsc /D "_DEBUG"
CFG_LDFLAGS = /debug /incremental:no /machine:X86

!ELSEIF "$(BUILD_MODE)" == "x64 Release"
CFG_CFLAGS  = /MD /Zi /O2 /Oy- /D "NDEBUG"
CFG_LDFLAGS = /debug /opt:ref /incremental:no /machine:X64

!ELSEIF "$(BUILD_MODE)" == "x64 Debug"
CFG_CFLAGS  = /MDd /Zi /Od /EHsc /D "_DEBUG"
CFG_LDFLAGS = /debug /incremental:no /machine:X64

!ELSE
!ERROR Unknown build mode "$(BUILD_MODE)"
!ENDIF

!IFDEF OUTDIR
CFG_OUTPUT  = $(OUTDIR)\iconv
!ELSE
!IF "$(BIND_MODE)" == "shared"
!IF "$(BUILD_MODE)" == "release" || "$(BUILD_MODE)" == "Release" \
 || "$(BUILD_MODE)" == "Win32 Release"
CFG_OUTPUT  = Release\iconv
!ELSEIF "$(BUILD_MODE)" == "debug" || "$(BUILD_MODE)" == "Debug" \
     || "$(BUILD_MODE)" == "Win32 Debug"
CFG_OUTPUT  = Debug\iconv
!ELSEIF "$(BUILD_MODE)" == "x64 Release"
CFG_OUTPUT  = x64\Release\iconv
!ELSEIF "$(BUILD_MODE)" == "x64 Debug"
CFG_OUTPUT  = x64\Debug\iconv
!ENDIF
!ELSEIF "$(BIND_MODE)" == "static"
!IF "$(BUILD_MODE)" == "release" || "$(BUILD_MODE)" == "Release" \
 || "$(BUILD_MODE)" == "Win32 Release"
CFG_OUTPUT  = LibR\iconv
!ELSEIF "$(BUILD_MODE)" == "debug" || "$(BUILD_MODE)" == "Debug" \
     || "$(BUILD_MODE)" == "Win32 Debug"
CFG_OUTPUT  = LibD\iconv
!ELSEIF "$(BUILD_MODE)" == "x64 Release"
CFG_OUTPUT  = x64\LibR\iconv
!ELSEIF "$(BUILD_MODE)" == "x64 Debug"
CFG_OUTPUT  = x64\LibD\iconv
!ENDIF
!ENDIF
!ENDIF


!IF "$(BIND_MODE)" == "shared"
API_LIBS = $(APR_OUT)\libapr-1.lib \
	   $(API_OUT)\libapriconv-1.lib

!ELSEIF "$(BIND_MODE)" == "static"
API_LIBS = $(APR_OUT)\apr-1.lib \
	   $(API_OUT)\apriconv-1.lib \
	  kernel32.lib advapi32.lib ws2_32.lib mswsock.lib
CFG_CFLAGS  = $(CFG_CFLAGS) /D "APR_DECLARE_STATIC" /D "API_DECLARE_STATIC"

!ELSE
!ERROR Unknown bind mode "$(BIND_MODE)"
!ENDIF




APR_PATH   = ..\..\apr
API_PATH   = ..
!IFDEF OUTDIR
OUTPUT_DIR   = $(OUTDIR)
!ELSE
OUTPUT_DIR   = $(API_PATH)\$(CFG_OUTPUT)
!ENDIF

INT_CFLAGS   = /nologo $(CFG_CFLAGS) /Fd$(MODRES).pdb /Fp$(MODRES).pch \
		/I "$(API_PATH)\include" /I "$(API_PATH)\lib" \
		/I "$(APR_PATH)\include" \
		/D "WIN32" /D "_WINDOWS" /D "_MBCS" /D "_USRDLL"
INT_LDFLAGS  = /nologo $(CFG_LDFLAGS) /dll /subsystem:windows /incremental:no \
		/export:iconv_module,DATA 

CFLAGS       = /W3
ALL_CFLAGS   = $(INT_CFLAGS) $(INT_INCLUDES) $(INT_DEFINES) $(CFLAGS)

LDFLAGS      = 
ALL_LDFLAGS  = $(INT_LDFLAGS) $(LDFLAGS)

all: $(OUTPUT_DIR) $(MODRES).pch $(ALL_TARGETS)

$(OUTPUT_DIR):
	$(SILENT)if not exist "$(OUTPUT_DIR)\$(NULL)" mkdir "$(OUTPUT_DIR)"

$(MODRES).pch:
        $(SILENT)echo #define ICONV_INTERNAL > $*.c
        $(SILENT)echo #include "iconv.h" >> $*.c
	$(SILENT)cl $(ALL_CFLAGS) /Fo$*.obj /Yciconv.h /c $*.c

.c{$(OUTPUT_DIR)}.so:
	$(SILENT)cl $(ALL_CFLAGS) /Fo$*.obj /Yuiconv.h /c $<
	$(SILENT)link $(ALL_LDFLAGS) $*.obj $(API_LIBS) /out:$@ \
		/base:@"..\build\BaseAddr.ref",$(@F)
	$(SILENT)if exist $@.manifest \
		$(SILENT)mt -nologo -manifest $@.manifest -outputresource:$@;2 \
		& del "$@.manifest"
	$(SILENT)del "$*.exp" & del "$*.lib"

# The rebase target below is used only to *regenerate* the BaseAddr.ref file
# if the module list or sizes change considerably.  Use the rebase target to

# to create the BaseAddr.0xNNNNNNNN.txt file of the rebase results, 
# then remerge it back into the explicit build/BaseAddr.ref file.
#
BASE_REF = $(OUTPUT_DIR)\BaseAddr.$(REBASE_TOP).txt
ALL_REBASE = -d -p -b $(REBASE_TOP) -C $(BASE_REF) 

rebase: $(ALL_TARGETS) 
	$(SILENT)echo Extracting .dbg symbols and rebasing all modules...
	$(SILENT)rebase $(ALL_REBASE) $(ALL_TARGETS)
	$(SILENT)echo.


clean:
	-$(SILENT)if exist "$(OUTPUT_DIR)/$(NULL)" $(rmdir) $(OUTPUT_DIR)

install:
	@echo Copying apr-iconv modules from $(OUTPUT_DIR) to $(INSTALL_DIR)
	-$(SILENT)mkdir "$(INSTALL_DIR)"
	$(SILENT)copy $(OUTPUT_DIR)\*.so "$(INSTALL_DIR)" < <<
A
<<
	@echo Copying apr-iconv pdb debugging symbols from $(OUTPUT_DIR) to $(INSTALL_DIR)
	$(SILENT)copy $(OUTPUT_DIR)\*.pdb "$(INSTALL_DIR)" < <<
A
<<
